// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: code.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from code.proto</summary>
public static partial class CodeReflection {

  #region Descriptor
  /// <summary>File descriptor for code.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CodeReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgpjb2RlLnByb3RvIiAKBENvZGUSGAoHbWV0aG9kcxgBIAMoCzIHLk1ldGhv",
          "ZCI6CgZNZXRob2QSDAoEbmFtZRgBIAEoCRIiCgxpbnN0cnVjdGlvbnMYAiAD",
          "KAsyDC5JbnN0cnVjdGlvbiLvBgoLSW5zdHJ1Y3Rpb24SHwoEdHlwZRgBIAEo",
          "DjIRLkluc3RydWN0aW9uLlR5cGUSMwoNcmVwZWF0VGltZXNEbxgCIAEoCzIa",
          "Lkluc3RydWN0aW9uLlJlcGVhdFRpbWVzRG9IABI7ChFyZXBlYXRDb25kaXRp",
          "b25EbxgDIAEoCzIeLkluc3RydWN0aW9uLlJlcGVhdENvbmRpdGlvbkRvSAAS",
          "IQoEaWZEbxgEIAEoCzIRLkluc3RydWN0aW9uLklmRG9IABIhCgRjYWxsGAUg",
          "ASgLMhEuSW5zdHJ1Y3Rpb24uQ2FsbEgAGkIKDVJlcGVhdFRpbWVzRG8SDQoF",
          "dGltZXMYASABKAUSIgoMaW5zdHJ1Y3Rpb25zGAIgAygLMgwuSW5zdHJ1Y3Rp",
          "b24aYgoRUmVwZWF0Q29uZGl0aW9uRG8SKQoJY29uZGl0aW9uGAEgAygOMhYu",
          "SW5zdHJ1Y3Rpb24uQ29uZGl0aW9uEiIKDGluc3RydWN0aW9ucxgCIAMoCzIM",
          "Lkluc3RydWN0aW9uGn8KBElmRG8SKQoJY29uZGl0aW9uGAEgAygOMhYuSW5z",
          "dHJ1Y3Rpb24uQ29uZGl0aW9uEiQKDmRvSW5zdHJ1Y3Rpb25zGAIgAygLMgwu",
          "SW5zdHJ1Y3Rpb24SJgoQZWxzZUluc3RydWN0aW9ucxgDIAMoCzIMLkluc3Ry",
          "dWN0aW9uGhoKBENhbGwSEgoKbWV0aG9kTmFtZRgBIAEoCSLEAQoEVHlwZRIR",
          "Cg1NT1ZFX0ZPUldBUkRTEAASDQoJVFVSTl9MRUZUEAESDgoKVFVSTl9SSUdI",
          "VBACEg8KC1RVUk5fQVJPVU5EEAMSCAoEV0FJVBAEEgsKB0RFTElWRVIQBRIT",
          "Cg9SRVBFQVRfVElNRVNfRE8QBhITCg9SRVBFQVRfV0hJTEVfRE8QBxITCg9S",
          "RVBFQVRfVU5USUxfRE8QCBIJCgVJRl9ETxAJEg4KCklGX0RPX0VMU0UQChII",
          "CgRDQUxMEAsicQoJQ29uZGl0aW9uEgcKA05PVBAAEhIKDkFUX0RFU1RJTkFU",
          "SU9OEAESFQoRVFJBRkZJQ19MSUdIVF9SRUQQAhIXChNUUkFGRklDX0xJR0hU",
          "X0dSRUVOEAMSFwoTUk9BRF9FWElTVFNfRk9SV0FSRBAEQggKBkRldGFpbGIG",
          "cHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Code), global::Code.Parser, new[]{ "Methods" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Method), global::Method.Parser, new[]{ "Name", "Instructions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Instruction), global::Instruction.Parser, new[]{ "Type", "RepeatTimesDo", "RepeatConditionDo", "IfDo", "Call" }, new[]{ "Detail" }, new[]{ typeof(global::Instruction.Types.Type), typeof(global::Instruction.Types.Condition) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.Types.RepeatTimesDo), global::Instruction.Types.RepeatTimesDo.Parser, new[]{ "Times", "Instructions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.Types.RepeatConditionDo), global::Instruction.Types.RepeatConditionDo.Parser, new[]{ "Condition", "Instructions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.Types.IfDo), global::Instruction.Types.IfDo.Parser, new[]{ "Condition", "DoInstructions", "ElseInstructions" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Instruction.Types.Call), global::Instruction.Types.Call.Parser, new[]{ "MethodName" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Code : pb::IMessage<Code> {
  private static readonly pb::MessageParser<Code> _parser = new pb::MessageParser<Code>(() => new Code());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Code> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CodeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Code() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Code(Code other) : this() {
    methods_ = other.methods_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Code Clone() {
    return new Code(this);
  }

  /// <summary>Field number for the "methods" field.</summary>
  public const int MethodsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Method> _repeated_methods_codec
      = pb::FieldCodec.ForMessage(10, global::Method.Parser);
  private readonly pbc::RepeatedField<global::Method> methods_ = new pbc::RepeatedField<global::Method>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Method> Methods {
    get { return methods_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Code);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Code other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!methods_.Equals(other.methods_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= methods_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    methods_.WriteTo(output, _repeated_methods_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += methods_.CalculateSize(_repeated_methods_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Code other) {
    if (other == null) {
      return;
    }
    methods_.Add(other.methods_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          methods_.AddEntriesFrom(input, _repeated_methods_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Method : pb::IMessage<Method> {
  private static readonly pb::MessageParser<Method> _parser = new pb::MessageParser<Method>(() => new Method());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Method> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CodeReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Method() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Method(Method other) : this() {
    name_ = other.name_;
    instructions_ = other.instructions_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Method Clone() {
    return new Method(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "instructions" field.</summary>
  public const int InstructionsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Instruction> _repeated_instructions_codec
      = pb::FieldCodec.ForMessage(18, global::Instruction.Parser);
  private readonly pbc::RepeatedField<global::Instruction> instructions_ = new pbc::RepeatedField<global::Instruction>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Instruction> Instructions {
    get { return instructions_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Method);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Method other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if(!instructions_.Equals(other.instructions_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= instructions_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    instructions_.WriteTo(output, _repeated_instructions_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += instructions_.CalculateSize(_repeated_instructions_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Method other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    instructions_.Add(other.instructions_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          instructions_.AddEntriesFrom(input, _repeated_instructions_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Instruction : pb::IMessage<Instruction> {
  private static readonly pb::MessageParser<Instruction> _parser = new pb::MessageParser<Instruction>(() => new Instruction());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Instruction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CodeReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Instruction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Instruction(Instruction other) : this() {
    type_ = other.type_;
    switch (other.DetailCase) {
      case DetailOneofCase.RepeatTimesDo:
        RepeatTimesDo = other.RepeatTimesDo.Clone();
        break;
      case DetailOneofCase.RepeatConditionDo:
        RepeatConditionDo = other.RepeatConditionDo.Clone();
        break;
      case DetailOneofCase.IfDo:
        IfDo = other.IfDo.Clone();
        break;
      case DetailOneofCase.Call:
        Call = other.Call.Clone();
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Instruction Clone() {
    return new Instruction(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::Instruction.Types.Type type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Instruction.Types.Type Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "repeatTimesDo" field.</summary>
  public const int RepeatTimesDoFieldNumber = 2;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Instruction.Types.RepeatTimesDo RepeatTimesDo {
    get { return detailCase_ == DetailOneofCase.RepeatTimesDo ? (global::Instruction.Types.RepeatTimesDo) detail_ : null; }
    set {
      detail_ = value;
      detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.RepeatTimesDo;
    }
  }

  /// <summary>Field number for the "repeatConditionDo" field.</summary>
  public const int RepeatConditionDoFieldNumber = 3;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Instruction.Types.RepeatConditionDo RepeatConditionDo {
    get { return detailCase_ == DetailOneofCase.RepeatConditionDo ? (global::Instruction.Types.RepeatConditionDo) detail_ : null; }
    set {
      detail_ = value;
      detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.RepeatConditionDo;
    }
  }

  /// <summary>Field number for the "ifDo" field.</summary>
  public const int IfDoFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Instruction.Types.IfDo IfDo {
    get { return detailCase_ == DetailOneofCase.IfDo ? (global::Instruction.Types.IfDo) detail_ : null; }
    set {
      detail_ = value;
      detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.IfDo;
    }
  }

  /// <summary>Field number for the "call" field.</summary>
  public const int CallFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Instruction.Types.Call Call {
    get { return detailCase_ == DetailOneofCase.Call ? (global::Instruction.Types.Call) detail_ : null; }
    set {
      detail_ = value;
      detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.Call;
    }
  }

  private object detail_;
  /// <summary>Enum of possible cases for the "Detail" oneof.</summary>
  public enum DetailOneofCase {
    None = 0,
    RepeatTimesDo = 2,
    RepeatConditionDo = 3,
    IfDo = 4,
    Call = 5,
  }
  private DetailOneofCase detailCase_ = DetailOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DetailOneofCase DetailCase {
    get { return detailCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDetail() {
    detailCase_ = DetailOneofCase.None;
    detail_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Instruction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Instruction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!object.Equals(RepeatTimesDo, other.RepeatTimesDo)) return false;
    if (!object.Equals(RepeatConditionDo, other.RepeatConditionDo)) return false;
    if (!object.Equals(IfDo, other.IfDo)) return false;
    if (!object.Equals(Call, other.Call)) return false;
    if (DetailCase != other.DetailCase) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (detailCase_ == DetailOneofCase.RepeatTimesDo) hash ^= RepeatTimesDo.GetHashCode();
    if (detailCase_ == DetailOneofCase.RepeatConditionDo) hash ^= RepeatConditionDo.GetHashCode();
    if (detailCase_ == DetailOneofCase.IfDo) hash ^= IfDo.GetHashCode();
    if (detailCase_ == DetailOneofCase.Call) hash ^= Call.GetHashCode();
    hash ^= (int) detailCase_;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (detailCase_ == DetailOneofCase.RepeatTimesDo) {
      output.WriteRawTag(18);
      output.WriteMessage(RepeatTimesDo);
    }
    if (detailCase_ == DetailOneofCase.RepeatConditionDo) {
      output.WriteRawTag(26);
      output.WriteMessage(RepeatConditionDo);
    }
    if (detailCase_ == DetailOneofCase.IfDo) {
      output.WriteRawTag(34);
      output.WriteMessage(IfDo);
    }
    if (detailCase_ == DetailOneofCase.Call) {
      output.WriteRawTag(42);
      output.WriteMessage(Call);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (detailCase_ == DetailOneofCase.RepeatTimesDo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepeatTimesDo);
    }
    if (detailCase_ == DetailOneofCase.RepeatConditionDo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepeatConditionDo);
    }
    if (detailCase_ == DetailOneofCase.IfDo) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(IfDo);
    }
    if (detailCase_ == DetailOneofCase.Call) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Call);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Instruction other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    switch (other.DetailCase) {
      case DetailOneofCase.RepeatTimesDo:
        RepeatTimesDo = other.RepeatTimesDo;
        break;
      case DetailOneofCase.RepeatConditionDo:
        RepeatConditionDo = other.RepeatConditionDo;
        break;
      case DetailOneofCase.IfDo:
        IfDo = other.IfDo;
        break;
      case DetailOneofCase.Call:
        Call = other.Call;
        break;
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::Instruction.Types.Type) input.ReadEnum();
          break;
        }
        case 18: {
          global::Instruction.Types.RepeatTimesDo subBuilder = new global::Instruction.Types.RepeatTimesDo();
          if (detailCase_ == DetailOneofCase.RepeatTimesDo) {
            subBuilder.MergeFrom(RepeatTimesDo);
          }
          input.ReadMessage(subBuilder);
          RepeatTimesDo = subBuilder;
          break;
        }
        case 26: {
          global::Instruction.Types.RepeatConditionDo subBuilder = new global::Instruction.Types.RepeatConditionDo();
          if (detailCase_ == DetailOneofCase.RepeatConditionDo) {
            subBuilder.MergeFrom(RepeatConditionDo);
          }
          input.ReadMessage(subBuilder);
          RepeatConditionDo = subBuilder;
          break;
        }
        case 34: {
          global::Instruction.Types.IfDo subBuilder = new global::Instruction.Types.IfDo();
          if (detailCase_ == DetailOneofCase.IfDo) {
            subBuilder.MergeFrom(IfDo);
          }
          input.ReadMessage(subBuilder);
          IfDo = subBuilder;
          break;
        }
        case 42: {
          global::Instruction.Types.Call subBuilder = new global::Instruction.Types.Call();
          if (detailCase_ == DetailOneofCase.Call) {
            subBuilder.MergeFrom(Call);
          }
          input.ReadMessage(subBuilder);
          Call = subBuilder;
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Instruction message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum Type {
      [pbr::OriginalName("MOVE_FORWARDS")] MoveForwards = 0,
      [pbr::OriginalName("TURN_LEFT")] TurnLeft = 1,
      [pbr::OriginalName("TURN_RIGHT")] TurnRight = 2,
      [pbr::OriginalName("TURN_AROUND")] TurnAround = 3,
      [pbr::OriginalName("WAIT")] Wait = 4,
      [pbr::OriginalName("DELIVER")] Deliver = 5,
      [pbr::OriginalName("REPEAT_TIMES_DO")] RepeatTimesDo = 6,
      [pbr::OriginalName("REPEAT_WHILE_DO")] RepeatWhileDo = 7,
      [pbr::OriginalName("REPEAT_UNTIL_DO")] RepeatUntilDo = 8,
      [pbr::OriginalName("IF_DO")] IfDo = 9,
      [pbr::OriginalName("IF_DO_ELSE")] IfDoElse = 10,
      [pbr::OriginalName("CALL")] Call = 11,
    }

    public enum Condition {
      [pbr::OriginalName("NOT")] Not = 0,
      [pbr::OriginalName("AT_DESTINATION")] AtDestination = 1,
      [pbr::OriginalName("TRAFFIC_LIGHT_RED")] TrafficLightRed = 2,
      [pbr::OriginalName("TRAFFIC_LIGHT_GREEN")] TrafficLightGreen = 3,
      [pbr::OriginalName("ROAD_EXISTS_FORWARD")] RoadExistsForward = 4,
    }

    public sealed partial class RepeatTimesDo : pb::IMessage<RepeatTimesDo> {
      private static readonly pb::MessageParser<RepeatTimesDo> _parser = new pb::MessageParser<RepeatTimesDo>(() => new RepeatTimesDo());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<RepeatTimesDo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Instruction.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RepeatTimesDo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RepeatTimesDo(RepeatTimesDo other) : this() {
        times_ = other.times_;
        instructions_ = other.instructions_.Clone();
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RepeatTimesDo Clone() {
        return new RepeatTimesDo(this);
      }

      /// <summary>Field number for the "times" field.</summary>
      public const int TimesFieldNumber = 1;
      private int times_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Times {
        get { return times_; }
        set {
          times_ = value;
        }
      }

      /// <summary>Field number for the "instructions" field.</summary>
      public const int InstructionsFieldNumber = 2;
      private static readonly pb::FieldCodec<global::Instruction> _repeated_instructions_codec
          = pb::FieldCodec.ForMessage(18, global::Instruction.Parser);
      private readonly pbc::RepeatedField<global::Instruction> instructions_ = new pbc::RepeatedField<global::Instruction>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Instruction> Instructions {
        get { return instructions_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as RepeatTimesDo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(RepeatTimesDo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Times != other.Times) return false;
        if(!instructions_.Equals(other.instructions_)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Times != 0) hash ^= Times.GetHashCode();
        hash ^= instructions_.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Times != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Times);
        }
        instructions_.WriteTo(output, _repeated_instructions_codec);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Times != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
        }
        size += instructions_.CalculateSize(_repeated_instructions_codec);
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(RepeatTimesDo other) {
        if (other == null) {
          return;
        }
        if (other.Times != 0) {
          Times = other.Times;
        }
        instructions_.Add(other.instructions_);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Times = input.ReadInt32();
              break;
            }
            case 18: {
              instructions_.AddEntriesFrom(input, _repeated_instructions_codec);
              break;
            }
          }
        }
      }

    }

    public sealed partial class RepeatConditionDo : pb::IMessage<RepeatConditionDo> {
      private static readonly pb::MessageParser<RepeatConditionDo> _parser = new pb::MessageParser<RepeatConditionDo>(() => new RepeatConditionDo());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<RepeatConditionDo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Instruction.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RepeatConditionDo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RepeatConditionDo(RepeatConditionDo other) : this() {
        condition_ = other.condition_.Clone();
        instructions_ = other.instructions_.Clone();
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public RepeatConditionDo Clone() {
        return new RepeatConditionDo(this);
      }

      /// <summary>Field number for the "condition" field.</summary>
      public const int ConditionFieldNumber = 1;
      private static readonly pb::FieldCodec<global::Instruction.Types.Condition> _repeated_condition_codec
          = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Instruction.Types.Condition) x);
      private readonly pbc::RepeatedField<global::Instruction.Types.Condition> condition_ = new pbc::RepeatedField<global::Instruction.Types.Condition>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Instruction.Types.Condition> Condition {
        get { return condition_; }
      }

      /// <summary>Field number for the "instructions" field.</summary>
      public const int InstructionsFieldNumber = 2;
      private static readonly pb::FieldCodec<global::Instruction> _repeated_instructions_codec
          = pb::FieldCodec.ForMessage(18, global::Instruction.Parser);
      private readonly pbc::RepeatedField<global::Instruction> instructions_ = new pbc::RepeatedField<global::Instruction>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Instruction> Instructions {
        get { return instructions_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as RepeatConditionDo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(RepeatConditionDo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!condition_.Equals(other.condition_)) return false;
        if(!instructions_.Equals(other.instructions_)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= condition_.GetHashCode();
        hash ^= instructions_.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        condition_.WriteTo(output, _repeated_condition_codec);
        instructions_.WriteTo(output, _repeated_instructions_codec);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        size += condition_.CalculateSize(_repeated_condition_codec);
        size += instructions_.CalculateSize(_repeated_instructions_codec);
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(RepeatConditionDo other) {
        if (other == null) {
          return;
        }
        condition_.Add(other.condition_);
        instructions_.Add(other.instructions_);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10:
            case 8: {
              condition_.AddEntriesFrom(input, _repeated_condition_codec);
              break;
            }
            case 18: {
              instructions_.AddEntriesFrom(input, _repeated_instructions_codec);
              break;
            }
          }
        }
      }

    }

    public sealed partial class IfDo : pb::IMessage<IfDo> {
      private static readonly pb::MessageParser<IfDo> _parser = new pb::MessageParser<IfDo>(() => new IfDo());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<IfDo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Instruction.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public IfDo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public IfDo(IfDo other) : this() {
        condition_ = other.condition_.Clone();
        doInstructions_ = other.doInstructions_.Clone();
        elseInstructions_ = other.elseInstructions_.Clone();
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public IfDo Clone() {
        return new IfDo(this);
      }

      /// <summary>Field number for the "condition" field.</summary>
      public const int ConditionFieldNumber = 1;
      private static readonly pb::FieldCodec<global::Instruction.Types.Condition> _repeated_condition_codec
          = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Instruction.Types.Condition) x);
      private readonly pbc::RepeatedField<global::Instruction.Types.Condition> condition_ = new pbc::RepeatedField<global::Instruction.Types.Condition>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Instruction.Types.Condition> Condition {
        get { return condition_; }
      }

      /// <summary>Field number for the "doInstructions" field.</summary>
      public const int DoInstructionsFieldNumber = 2;
      private static readonly pb::FieldCodec<global::Instruction> _repeated_doInstructions_codec
          = pb::FieldCodec.ForMessage(18, global::Instruction.Parser);
      private readonly pbc::RepeatedField<global::Instruction> doInstructions_ = new pbc::RepeatedField<global::Instruction>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Instruction> DoInstructions {
        get { return doInstructions_; }
      }

      /// <summary>Field number for the "elseInstructions" field.</summary>
      public const int ElseInstructionsFieldNumber = 3;
      private static readonly pb::FieldCodec<global::Instruction> _repeated_elseInstructions_codec
          = pb::FieldCodec.ForMessage(26, global::Instruction.Parser);
      private readonly pbc::RepeatedField<global::Instruction> elseInstructions_ = new pbc::RepeatedField<global::Instruction>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::Instruction> ElseInstructions {
        get { return elseInstructions_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as IfDo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(IfDo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!condition_.Equals(other.condition_)) return false;
        if(!doInstructions_.Equals(other.doInstructions_)) return false;
        if(!elseInstructions_.Equals(other.elseInstructions_)) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= condition_.GetHashCode();
        hash ^= doInstructions_.GetHashCode();
        hash ^= elseInstructions_.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        condition_.WriteTo(output, _repeated_condition_codec);
        doInstructions_.WriteTo(output, _repeated_doInstructions_codec);
        elseInstructions_.WriteTo(output, _repeated_elseInstructions_codec);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        size += condition_.CalculateSize(_repeated_condition_codec);
        size += doInstructions_.CalculateSize(_repeated_doInstructions_codec);
        size += elseInstructions_.CalculateSize(_repeated_elseInstructions_codec);
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(IfDo other) {
        if (other == null) {
          return;
        }
        condition_.Add(other.condition_);
        doInstructions_.Add(other.doInstructions_);
        elseInstructions_.Add(other.elseInstructions_);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10:
            case 8: {
              condition_.AddEntriesFrom(input, _repeated_condition_codec);
              break;
            }
            case 18: {
              doInstructions_.AddEntriesFrom(input, _repeated_doInstructions_codec);
              break;
            }
            case 26: {
              elseInstructions_.AddEntriesFrom(input, _repeated_elseInstructions_codec);
              break;
            }
          }
        }
      }

    }

    public sealed partial class Call : pb::IMessage<Call> {
      private static readonly pb::MessageParser<Call> _parser = new pb::MessageParser<Call>(() => new Call());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Call> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Instruction.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Call() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Call(Call other) : this() {
        methodName_ = other.methodName_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Call Clone() {
        return new Call(this);
      }

      /// <summary>Field number for the "methodName" field.</summary>
      public const int MethodNameFieldNumber = 1;
      private string methodName_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string MethodName {
        get { return methodName_; }
        set {
          methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Call);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Call other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (MethodName != other.MethodName) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (MethodName.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(MethodName);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (MethodName.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Call other) {
        if (other == null) {
          return;
        }
        if (other.MethodName.Length != 0) {
          MethodName = other.MethodName;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              MethodName = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
